"""
Django settings for MPCAutofill project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
from typing import Optional

import django_stubs_ext
import environ
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

django_stubs_ext.monkeypatch()  # https://stackoverflow.com/q/67965529

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Production-specific settings kept in .env, modify the .env.dist then rename
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
env.read_env(os.path.join(BASE_DIR, "MPCAutofill/.env"))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY", default="-")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG", default=False)

# IP or Domain
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["localhost", "127.0.0.1"])

# Unique site information
GTAG = env("GTAG", default="")  # Google Analytics
SITE_NAME = env("SITE_NAME", default="MPC Autofill")
TARGET_EMAIL = env("TARGET_EMAIL", default="your_email@somewhere.com")
DISCORD = env("DISCORD", default="https://discord.gg/magicproxies")
REDDIT = env("REDDIT", default="https://www.reddit.com/r/mpcproxies/")
THEME = env("THEME", default="superhero")
DESCRIPTION = env("DESCRIPTION", default="")

# Integration secrets
MOXFIELD_SECRET: Optional[str] = env("MOXFIELD_SECRET", default=None)

PREPEND_WWW = env("PREPEND_WWW", default=False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
CSRF_TRUSTED_ORIGINS = env(
    "CSRF_TRUSTED_ORIGINS",
    default=[
        "http://localhost",
        "http://127.0.0.1",
        "http://localhost:8000",
        "http://127.0.0.1:8000",
    ],
)  # required for Docker with Django 4.x+

# Application definition

INSTALLED_APPS = [
    "cardpicker.apps.CardpickerConfig",
    "accounts",
    "django_q",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_elasticsearch_dsl",
    "corsheaders",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.gzip.GZipMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS",
    # allow CORS from a frontend app running locally and from the deployed frontend
    default=[
        "http://127.0.0.1",
        "http://127.0.0.1:3000",
        "http://localhost",
        "http://localhost:3000",
        "https://mpcautofill.github.io",
        "https://mpcfill.com",
    ],
)

ROOT_URLCONF = "MPCAutofill.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "MPCAutofill.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": env("DATABASE_ENGINE", default="django.db.backends.postgresql"),
        "NAME": env("DATABASE_NAME", default="mpcautofill"),
        "USER": env("DATABASE_USER", default="mpcautofill"),
        "PASSWORD": env("DATABASE_PASSWORD", default="mpcautofill"),
        "HOST": env("DATABASE_HOST", default="localhost"),
        "PORT": env("DATABASE_PORT", default=5432),
    }
}
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = env("LANG_CODE", default="en-us")

TIME_ZONE = env("TIME_ZONE", default="America/New_York")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
STATIC_URL = "/" + env("STATIC", default="static") + "/"
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

STATICFILES_DIRS = [
    os.path.normpath(os.path.join(BASE_DIR, "cardpicker/static")),
]

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), env("STATIC", default="static"))

# elasticsearch DSL settings
ELASTICSEARCH_HOST = env("ELASTICSEARCH_HOST", default="localhost")
ELASTICSEARCH_PORT = env("ELASTICSEARCH_PORT", default="9200")
ELASTICSEARCH_DSL = {
    "default": {"hosts": f"{ELASTICSEARCH_HOST}:{ELASTICSEARCH_PORT}"},
}

ELASTICSEARCH_DSL_AUTOSYNC = False

# Email for logging
ADMINS = [("admin", env("TARGET_EMAIL", default=""))]
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = env("DJANGO_GMAIL", default="")
EMAIL_HOST_PASSWORD = env("DJANGO_GMAIL_PASSWORD", default="")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "default from email"

# Database update settings
DEFAULT_CARDBACK_FOLDER_PATH = env("DEFAULT_CARDBACK_FOLDER_PATH", default="Chilli_Axe's MTG Renders / 12. Cardbacks")
DEFAULT_CARDBACK_IMAGE_NAME = env("DEFAULT_CARDBACK_IMAGE_NAME", default="Black Lotus")

# Game integration - see integrations.py for valid options
GAME = env("GAME", default="")

# PATREON
PATREON_ACCESS = env("PATREON_ACCESS", default="")
PATREON_REFRESH = env("PATREON_REFRESH", default="")
PATREON_CLIENT = env("PATREON_CLIENT", default="")
PATREON_SECRET = env("PATREON_SECRET", default="")
PATREON_URL = env("PATREON_URL", default="")

# Sentry
if len(sys.argv) >= 2 and sys.argv[1] != "runserver" and env("DJANGO_DEBUG", default=False) is False:
    sentry_sdk.init(
        dsn="https://4d29db1957fb9b3153aaba66e776b01f@o4505848489246720.ingest.sentry.io/4505848491540480",
        integrations=[DjangoIntegration()],
        # If you wish to associate users to errors (assuming you are using
        # django.contrib.auth) you may enable sending PII data.
        send_default_pii=True,
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for performance monitoring.
        # We recommend adjusting this value in production.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
    )

# django-q2
Q_CLUSTER = {
    "name": "DjangoORM",
    "workers": 8,
    "recycle": 500,
    "timeout": 60 * 60 * 12,  # 12 hours - extreme upper limit
    "retry": 60 * 60 * 12 + 1,  # must be longer than timeout
    "max_attempts": 1,
    "compress": True,
    "save_limit": 250,
    "queue_limit": 500,
    "cpu_affinity": 1,
    "label": "Django Q2",
    "orm": "default",
}
